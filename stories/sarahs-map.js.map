{"version":3,"file":"sarahs-map.js","sourceRoot":"","sources":["../src/stories/sarahs-map.ts"],"names":[],"mappings":"AAAA,OAAO,CAAC,MAAM,SAAS,CAAC;AACxB,OAAO,0BAA0B,CAAC;AAClC,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,kBAAkB,CAAC;AAE1B,MAAM,OAAO,WAAY,SAAQ,UAAU;IAA3C;;QAME,WAAM,GAAkB,IAAI,CAAC;QAC7B,cAAS,GAAe,EAAE,CAAC;QAC3B,QAAG,GAAiB,IAAI,CAAC;IA8C3B,CAAC;IA5CU,KAAK,CAAC,YAAY;QACzB,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC9B,CAAC;QACD,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,MAAgB,CAAC,CAAC;YACpD,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;YACnE,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACnC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;IAED,aAAa;QACX,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAgB,CAAC;QAExE,IAAI,UAAU,EAAE,CAAC;YACf,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;YAE9D,CAAC,CAAC,SAAS,CAAC,oDAAoD,EAAE;gBAChE,WAAW,EAAE,mCAAmC;aACjD,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QACzC,CAAC;IACH,CAAC;IAED,UAAU;QACR,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE;YAC7C,IAAI,GAAG,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;gBAC3B,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC;YACpE,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA,sBAAsB,CAAC;IACpC,CAAC;;AApDe,sBAAU,GAAG;IAC3B,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;IACxB,SAAS,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE;CACxC,AAHyB,CAGxB;AAoDJ,cAAc,CAAC,MAAM,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC","sourcesContent":["import L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { LitElement, html } from 'lit';\nimport './sarahs-map.css';\n\nexport class LocationMap extends LitElement {\n  static override properties = {\n    apiUrl: { type: String },\n    locations: { type: Array, state: true },\n  };\n\n  apiUrl: string | null = null;\n  locations: Array<any> = [];\n  map: L.Map | null = null;\n\n  override async firstUpdated() {\n    if (this.apiUrl) {\n      await this.fetchLocations();\n    }\n    this.initializeMap();\n  }\n\n  async fetchLocations() {\n    try {\n      const response = await fetch(this.apiUrl as string);\n      if (!response.ok) throw new Error('Failed to fetch location data');\n      const data = await response.json();\n      this.locations = data;\n      this.addMarkers();\n    } catch (error) {\n      console.error('Error fetching location data:', error);\n    }\n  }\n\n  initializeMap() {\n    const mapElement = this.renderRoot.querySelector('#map') as HTMLElement;\n\n    if (mapElement) {\n      this.map = L.map(mapElement).setView([39.9526, -75.1652], 12);\n\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; OpenStreetMap contributors',\n      }).addTo(this.map);\n    } else {\n      console.error('Map element not found');\n    }\n  }\n\n  addMarkers() {\n    this.locations.forEach(({ lat, lon, title }) => {\n      if (lat && lon && this.map) {\n        L.marker([lat, lon]).addTo(this.map).bindPopup(`<b>${title}</b>`);\n      }\n    });\n  }\n\n  override render() {\n    return html`<div id=\"map\"></div>`;\n  }\n}\n\ncustomElements.define('location-map', LocationMap);\n"]}